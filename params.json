{
  "name": "mopviewer",
  "tagline": "Mopviewer Using OpenGL",
  "body": "mopViewer [![Build Status](https://travis-ci.org/Afrostie/Mopviewer.svg?branch=master)](https://travis-ci.org/Afrostie/Mopviewer)\r\n=================================================================================================================================\r\n\r\nmopViewer is a project I took on for my 3rd Year University Project. mopViewer is a visualisation tool to display the data generated by [Sulaco](https://gitlab.com/carey.pridgeon/sulaco) (Previously known as moody).\r\n\r\nSulaco is a parallel n-body modelling framework for use in moderatelly large modelling scenarios of several thousand particles. The results are recorded in .mop files.\r\n\r\nmopViewer can load these .mop files allowing you to explore the simulated scenes in space.\r\n\r\nThe main interface is made in nCurses which displays the data from the file. The main viewer is made from OpenGL and allows full 3-dimensional movement.\r\n\r\nThis project is still in it's very early stages and only implements the basics for displaying the files.\r\n\r\n*This shows a MopFile with 10,000 particles forming a Globular Cluster* ![cluster](https://raw.githubusercontent.com/Afrostie/Mopviewer/master/Resources/Images/cluster1.png)*This shows a MopFile with 100,000 particles* ![100000](https://raw.githubusercontent.com/Afrostie/Mopviewer/master/Resources/Images/100000.png)\r\n\r\nCurrent Features/Usage:\r\n-----------------------\r\n\r\n1.\tEnter *1* to look at Particle information\r\n2.\tEnter *2* to Open mopViewer\r\n3.\tEnter any other key on main screen to exit\r\n4.\tUse *Up* and *Down* Arrow Keys to increase or decrease the amount of particles to load\r\n5.\tUse *Left* and *Right* Arrow Keys scale up or down the distances between particles\r\n\r\nParticle Information Screen:\r\n----------------------------\r\n\r\n1.\tUse the *Left* and *Right* Arrow Keys to cycle between particles\r\n2.\tUse *2* to exit program to main menu\r\n3.\tUse *Up* Arrow to cycle through states\r\n4.\tUse *Down* Arrow to reset to original state\r\n\r\nInstallation\r\n------------\r\n\r\nOnly been tested on Ubuntu at the moment. Should be compatible with cygwin\r\n\r\n### Basic Steps:\r\n\r\nAll the libraries except for GLFW3 (unless on Ubuntu 15) or STB are available by apt-get.\r\n\r\nGLFW3 you will need to download and build yourself, STB needs to be downloaded and moved to /usr/include or similar\r\n\r\n```shell\r\ngit clone https://github.com/afrostie/mopViewer.git --recursive\r\ncd mopViewer/\r\nmake\r\n./mopViewer\r\n```\r\n\r\n### Required Libraries\r\n\r\n1.\tOpenGL 3.3 or higher compatible GPU/drivers\r\n2.\t[GLFW3](http://www.glfw.org/)\r\n3.\t[GLEW](http://glew.sourceforge.net/)\r\n4.\tnCurses *(libncurses-dev)*\r\n5.\t[glm](http://glm.g-truc.net/0.9.7/index.html)\r\n6.\t[STB](https://github.com/nothings/stb) for image loading\r\n7.\t[Assimp](https://github.com/assimp/assimp) for model loading (Use newer version off of github or it won't compile)\r\n8.\tNot a library but there is some c++11 features in use\r\n\r\n#### Important Note\r\n\r\nThe loading of .mop files has been moved to a seperate repository as it is code shared between mopViewer and Sulaco. It can be found here [Mopfile](http://gitlab.com/carey.pridgeon/Mopfile)\r\n\r\nMopfile is included as a submodule in mopViewer, this means there are two ways to download.\r\n\r\n##### Method 1: Clone the repository using the --recursive tag\r\n\r\n```bash\r\n  git clone https://github.com/afrostie/mopViewer.git --recursive\r\n```\r\n\r\n##### Method 2: Alternative method\r\n\r\n```bash\r\ngit submodule init\r\ngit submodule update\r\ngit pull origin master\r\n```\r\n\r\nCurrently uses a Makefile to compile so make is required\r\n\r\nDownload the latest [release](https://github.com/Afrostie/mopViewer/releases/tag/1.2), unpack it and run make\r\n\r\nMopFile's\r\n---------\r\n\r\n1.\tMopFiles should be placed in the Resources Folder\r\n2.\tWhen asked for the File Name it automatically adds the file location and the extension.\r\n3.\tE.G to use the 10000 particles file simply enter 10000 when prompted\r\n4.\tMopFiles too large for github can be downloaded from [here](https://www.dropbox.com/sh/9mq6s7wrj2i3udk/AABcujcJOI9ZtQ-YM0H6_1sRa?dl=0)\r\n\r\nModification's\r\n--------------\r\n\r\nThis project is in it's very early stages and the code is extremely messy and latest version will often be unstable. Most of the important part happens in [mainApplication/Viewer/gameWindow.cpp](mainApplication/Viewer/gameWindow.cpp)\r\n\r\nIf you want to check the screen size currently you need to modify these values:\r\n\r\n```c++\r\nGLint WIDTH = 1920;\r\nGLint HEIGHT = 1080;\r\n```\r\n\r\nTo change model used for particles modify:\r\n\r\n```c++\r\nModel newModel(\"Resources/Model/sphere/sphere.obj\");\r\n```\r\n\r\nFor loading large files it can be useful to see how many particles are loaded. In this case uncomment this line found in [Mopfile/MopFile.h](Mopfile/MopFile.h)\r\n\r\n```c++\r\nstd::cout << \"Loaded Object: \" << x << \" Out of: \" << numParticles << std::endl;\r\n```\r\n\r\nTODO:\r\n=====\r\n\r\n1.\tImprove loading times for large particle counts. Can be upwards of 5 minutes for 100,000 particles\r\n2.\tUse instanced rendering to improve performance for large amounts of particles\r\n3.\tMake improvements to skipping to allow for finer control over the amount of particles loading\r\n4.\tAdd optional debug mode that will enable/disable output to the console\r\n5.\tAdd more features!\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}